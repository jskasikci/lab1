name: Build Test and Push
on: [push]
env:
  IMAGE_NAME: student_service
  REPO_NAME: jkasikci

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build docker
        run: |
          docker build . -t $REPO_NAME/$IMAGE_NAME

      - name: Run MongoDB
        run: |
          docker run -d -p 27017:27017 --name mongodb mongo

      - name: Run student service
        run: |
          docker run -d -p 8080:8080 --link mongodb --name student_service $REPO_NAME/$IMAGE_NAME:latest

      - name: View application logs
        run: |
          docker logs student_service

      - name: Wait for MongoDB to be ready
        run: |
          for i in {1..30}; do
            nc -z localhost 27017 && break || sleep 3;
          done

      - name: Wait for application to be ready
        run: |
          for i in {1..30}; do
            nc -z localhost 8080 && break || sleep 3;
          done

      - name: Run API Tests
        id: run-newman
        uses: anthonyvscode/newman-action@master
        with:
          collection: postman/collection.json
          environment: postman/environment.json
          reporters: cli
          bail: true

      - name: Check if we failed
        id: fail-check
        shell: bash
        env:
          JSON_DOC: ${{ steps.run-newman.outputs.summary }}
        run: |
          printf '%s\n' "$JSON_DOC" > summary.json
          cat summary.json
          if grep -q Collection summary.json; then
            echo "failed=false" >> $GITHUB_OUTPUT;
          else
            echo "failed=true" >> $GITHUB_OUTPUT;
          fi

      - name: Fail if tests failed
        if: ${{ steps.fail-check.outputs.failed == 'true' }}
        run: exit 1

      - name: Clean up Docker containers
        run: |
          docker stop mongodb
          docker rm mongodb
          docker stop student_service
          docker rm student_service

      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Push image to Docker Hub
        run: |
          docker push $REPO_NAME/$IMAGE_NAME

